package mapreduce

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"unicode"

	"github.com/eshaanagg/distributed/utils"
)

// Returns the key/value pairs for the passed content
// The `filename` argument is ignored
func mapF(filename string, content string) []KeyValue {
	keyValueMap := make(map[string]int)

	f := func(c rune) bool {
		return !unicode.IsLetter(c) && !unicode.IsNumber(c)
	}
	words := strings.FieldsFunc(content, f)

	for _, word := range words {
		keyValueMap[word]++
	}

	kvs := make([]KeyValue, 0)
	for k, v := range keyValueMap {
		val := strconv.Itoa(v)
		kvs = append(kvs, KeyValue{k, val})
	}

	return kvs
}

// Called once for each key generated by the map tasks, with a list of all
// the values created for that key by any map task
func reduceF(key string, values []string) string {
	sum := 0
	for _, v := range values {
		intValue, err := strconv.Atoi(v)
		if err != nil {
			log.Fatalf("reduceF: failed to convert the passed value %s to integer: %v\n", v, err)
		}
		sum += intValue
	}
	return strconv.Itoa(sum)
}

// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func Main(args []string) {
	if len(args) < 3 {
		fmt.Printf("Not enough arguments passed from the command line. Expected at least 3, got %d\n", len(args))
	} else if args[0] == "master" {
		var mr *Master
		filePaths := args[2:]

		err := utils.EmptyDirectory(resultsDirectory)
		if err != nil {
			log.Fatalf("Failed as the results directory couldn't be cleaned: %v", err)
		}

		if args[1] == "sequential" {
			mr = Sequential("wcseq", filePaths, 3, mapF, reduceF)
		} else {
			mr = Distributed("wcseq", filePaths, 3, args[1])
		}
		mr.Wait()
	} else {
		RunWorker(args[2], args[3], mapF, reduceF, 100)
	}
}
